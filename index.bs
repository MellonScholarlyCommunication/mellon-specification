<pre class='metadata'>
Title: Use Cases and Requirements for Linked Data Notifications in the Mellon Project
Shortname: ldnp-req
Level: 1
Max ToC Depth: 3
Status: w3c/ED
Group: UGent-Imec
URL: 
Editor: Ruben Dedecker (UGent - Imec)
Markup Shorthands: markdown yes
Abstract:
  Use Cases and Requirements for Linked Data Notifications in the Mellon Project.
</pre>

<!-- For bikeshed style overrides -->
<style>

  table.collections thead tr {
    font-size: 16px;
  }

  table.collections tbody tr:nth-child(even) {
    background-color: lightgray;
    font-size: 12px;
  }

  @media (prefers-color-scheme: dark) {
    table.collections tbody tr:nth-child(even) {
      background-color: DarkSlateGray;
    }
  }

  table.collections tbody td {
    font-size: 12px;
  }

  figcaption {
    text-align: left;
  }

  a[data-link-type=dfn] {
    color: #000000;
  }

  @media (prefers-color-scheme: dark) {
    a[data-link-type=dfn] {
      color: #FFFFFF;
    }
  }

}

</style>

<div boilerplate="copyright">
MIT License Copyright 2019 - 2020 UGent - Imec
</div>

Introduction {#intro}
================================================================================

The Mellon Project is framework that is designed to enable researchers to store and publish their research-related data on the Web, and make it easily accessible.

In order to design this framework, certain technical limitations have to be overcome.
In order to situate these limitations, we present some [[#usecases]] in this document that represent functionality of the Mellon framework.
From these usecases, we dericve the [[#requirements]] in this document.


Use Cases {#usecases}
================================================================================
For the purposes of simplicity, the use cases herein assume that named individuals (i.e. Alice, Bob, Carol, etc.) are already authenticated agents, that have a Solid pod (except for point in [[#login]]).

## Logging in ## {#login}
To interact with actors and resources in the Mellon framework, the user must have a valid pod environment to store these interactions. Because of this, Mellon must provide the capabilities to create a pod environment and login to this pod environment.

### Create a researcher pod ### {#create-pod}
Bob wants to interact with published resources using the Mellon framework, but does not have a pod environment available to store these interactions.
On opening the Web view of the Mellon project, Bob is given the option to login to an existing pod, or to create a new pod.
Bob chooses the option to create a new pod, and is redirected to an environment where he can create a new Solid Pod.

### Logging in to existing researcher pod ### {#login-pod}
Bob already has an existing pod environment, and wants to login on the Mellon project web view.
On opening the view, he is given the option to login to an existing pod, or to create a new pod.
Bob chooses the option to login to an existing pod, and is redirected to an environment to login to a new Solid Pod.
On login, Bob is redirected to the landing page.


## Profile ## {#profile}
A framework designed for scholarly communication requires researchers to be able to setup and a personal profile, that should be available both from inside and outside the framework.
This allows for researchers to discover colleagues in the same field with the same interests, and to follow new developments.
Potentially, verification capabilities should be in place to verify the information provided by the researcher.

### View actor researcher profile ### {#view-profile}
Bob encounteres an interesting research paper made by Alice.
Bob clicks on Alice's name, and is redirected to a profile viewer.
This profile viewer shows all relevant information available for Alice, and gives the option to Follow or Block Alice [[#subscribe to actor]].
can be provided 
### Edit actor researcher profile ### {#edit-profile}
While viewing his own profile, Bob decides to edit the profile information.
Bob clicks on the edit button to go to a profile editor view.
Bob fills in additional information about work location and previous work locations.
Bob saves the edits, and they are saved to his profile.
Bob is redirected to the profile view, where the information has been updated, and is displayed correctly according to the changes made.

This action can be performed for all profile cards where Bob has the correct edit permissions (which is usually only his own profile card).


## Subscribing to entities in the network ## {#subscribe}
Subscribing to entities in the network is an important part of scholarly communication, as this is used to filter relevant information and publications for actors in the network.

### View actors subscribed to entity 
For all subscribable entities in the network, an actor should be able to view the actors subscribed to the entity, given the correct permissions.

#### View actors subscribed to actor
Bob wants to view the actors in the network that are subscribed to him.
For this, Bob goes to his profile viewer, and goes to the followers view.
This provides Bob with a list of all actors in the network following him.
In this list.

#### View actors subscribed to publication
Bob wishes to view actors subscribed to his last publication.
Bob navigates to the publication view of his last publication, 
and clicks on the following tab.
Now Bob has a list of all actors to his last publication.


### View entities an actor is subscribed to
Bob wishes to see all actors he is subscribed to.
For this, Bob navigates to his subscription view, where a list of all actors that Bob is subsribed to is available.
Separate tabs are made available for the different kinds of subscribable entities in the network.

### Subscribe to a new entity
Bob wishes to subscribe to a new entity in the network.

#### Subscribe to a new actor #### {#subscribe to actor}
Bob wishes to receive updates of events of his colleague Alice.
For this, Bob heads to the profile of Alice, and clicks the follow option.
This adds Alice to the following list of Bob, and adds Bob to the followers list of Alice.
For all future events of Alice, Bob now receives a notification for the event.

#### Subscribe to a new publication
Bob wishes to receive updates of events of a certain publication that he is interested in.
Bob heads to the publication view, and clicks the follow option.
For all future events in the publication lifecycle, Bob now receives a notification.

### Unsubscribe from an entitiy 
Bob does not wish to receive updates from a certain actor anymore that he is following.
Bob navigates to the following view, showing the entities that Bob is following in the network.
Bob searches for the entity in the list that he wants to unsibscribe from.
Bob clicks ubsubscribe, after which Bob is unsubscribed from the entity and the entitiy is removed from the list.

### Block actors subscribed to entity 
Bob wishes to remove an actor from his followers list (or from the followers list of one of his pubications).
For this, Bob navigates to the followers view of the resource in question.
Here, bob searches for the actor that he wants to block from a resource.
Bob adds this actor to the blocked list for the resource in question.


## Publications ## {#publications}

### Add new publication ### {#add-publications}
Bob decides to publish a new research paper.
As the research was never uploaded before, Bob now uploads the resource as a publication.
On upload, the research is sent to a third party for verification [[#third-party-certification]].
As the resource is published, READ permissions for the research are set to public.
Bob decides to give public permissions to interact with the resource [[#permissions]].


### Publication versioning ### {#publication-versioning}
It may be of use to incorporate a versioning system for (published?) research.
This allows the most up to date versions of research to be available for all parties, as well as for interactions such as comments on different versions of the publication to still make sense when the research has been update.

#### View publication versions #### {#view-versions}
Bob wishes to see the available version for a publication.
In the publication view, an option is availble to select the different versions of the publication.
Bob selects the desired version, and the publication view is updated to show the data of the selected publication version.

#### Link publication resources with a publication version #### {#link-versions}
Bob is going through the reviews of a publication.
Bob notices a review was done on an older version of the publication. By following the reference to the outdated version of the publication, Bob is redirected to the publication view for the older version of the publication.


### Research objects ### {#research-objects}
Bob wishes to not only publish the final research paper of a research project on Mellon, but wants to also publish the data, code, and other resources used during the research project to be used by other researchers and for later verification of the research. 
For this, Bob creates an [RO-crate](https://www.researchobject.org/ro-crate/), and uploads this to the Mellon Web interface.

### In-progress research ### {#in-progress-research}

#### Uploading in-progress research #### {#upload-in-progress-research}
Bob uploads in-progress research to his solid pod.
As the research is still in progress, Bob flags the research project as in-progress.
On upload, Bob decides his research group can have read access to the resources, as well as the possibility to comment on the resource or propose edits. He [sets these permissions](#permissions) in the upload screen [[#permissions]].

#### Publish in-progress research #### {#publish-in-progress-research}
After completing the research, and finishing the paper, Bob decides to publish the research.
As the research was already uploaded as in-progress, Bob now has the option to publish the research. This flags the research as published, and sends the research to a 3d party to be verified [[#third-party-certification]].



### Publication permissions ### {#publications-permissions-stump}
For use cases involving permissions, see [[#publication-permissions]]


## Interactions ## {#interactions}
Scholarly communication requires the ability for different actors in the network to interact with each other and with the done research and publications.

### Actor interactions ### {#actor-interactions}

#### Direct message #### {#interaction-chat}
Bob has discovered relevant publications by a Alice, and wants to discuss his current research with Alice.
For this, Bob navigates to Alice's profile, and chooses one of the contact points of Alice listed in her profile.
Bob decides to send a direct message to Alice's pod, instead of using external messaging tools.

#### Public message (post) #### {#interaction-post}

### Publication interactions ### {#publication-interactions}

#### Comment #### {#interaction-comment}

#### Propose edit #### {#interaction-propose-edit}
Bob is evaluating the research of his colleague Alice, that is still in-progress.
In this process, he finds some things that should be adapted, and proposes some edits on the research paper. These edits are sent to Alice's pod using the notification mechanism, and are added as metadata to the in-progress research.
A second colleague with full access to the in progress research sees the proposed edits, and decides to edit the paper to incorporate the proposed edits.

This action depends on the type of publication, or can be outsourced to external tooling.




## Permissions ## {#permissions}

### Actor follower permissions ### {#actor-permissions}

#### READ permissions #### {#follower-read-permissions}

#### WRITE permissions #### {#follower-write-permissions}

#### INTERACTION permissions #### {#follower-interaction-permissions}

#### CONTROL permissions #### {#follower-control-permissions}


### Publication follower permissions ### {#publication-permissions}

#### READ permissions #### {#publication-read-permissions}

#### WRITE permissions #### {#publication-write-permissions}

#### INTERACTION permissions #### {#publication-interaction-permissions}

#### CONTROL permissions #### {#publication-control-permissions}

### Group permissions ### {#group-permissions}

#### Create group permissions #### {#create-group-permissions}

#### Edit group permissions #### {#edit-group-permissions}




## News feed ## {#feed}

### Personalized news feed ### {#news-feed}

### Post feed of other actors ### {#post-feed}



## Third party services ## {#third-party}
The Mellon framework can serves as a 

### Subscribe pod to service ### {#third-party-subscribe}
Bob wishes to make use of the Ugent service that indexes and archives all research of the UGent.
Bob registres his pod to the UGent service via the UGent service endpoint.
Bob grants the UGent service READ access to the publications of his pod.
The UGent service can now index Bob's publications, and provide services such as related publications, statistics, ... 
The UGent service can also act as an [activitypub](https://www.w3.org/TR/activitypub/) service.

### Certify publications ### {#third-party-certification}
On publication of a resource, Bob wants to cerify this publication with a third party.
For this, Bob sends the publication to a third party verification service.
This service MUST return a timestamped proof that the publication has been proposed for certification.
On verification that the publication is genuine, the service sends a notification to the pod inbox with a ceritification that the research has been verified by the third party.






Requirements {#requirements}
================================================================================
In this section the requirements are listed based on the use cases proposed in [[#usecases]].

## Storage service ## {#storage-service}
The Mellon framework aims to provide researches with the ability to publish their own research, and keep control of the data in the process.
For this, pod environments such as Solid, that can be hosted by research groups themselves or on third party services, can be used.

### Publication storage ### {#publication-storage}
Publications can be stored as documents on the data pod of the researcher, or can be linked to the data pod from an external sources using mechanics described in [[#data-discovery]].


#### Publication format #### {#publication-format}
The format of a publication has consequences on the interactions that are possible with the publication.
Interactions possible with html files, will not be possible for research stored in a PDF or LATEX format.
Because of this, EITHER research MUST be published in a set format, or services SHOULD advertise the formats they accept [[#services]].

#### In-progress research storage #### {#publication-storage}
Supporting in-progress research may provide an easy platform for research groups to evaluate research internally before publishing the research and making it public.
In-progress research does not require additional functionality from the framework, but requires a different template to be available on upload, where permissions are automatically set on private for all resources, except for actors or groups of actors that are selected by the uploades (such as the research group of the uploader).

#### Research Object Crate storage #### {#publication-storage}
Research Object Crates or [RO-crates](https://www.researchobject.org/ro-crate/) are a format to store research projects, that allow different aspects of the research (paper, code, dataset, configuration files, ... ) to be bundeled.
The Mellon framework would certainly benefit in requiring applications built on the Mellon Framework to be able to process RO-creates.
This also allows datasets used for publications to be made public (given that permissions are set to public), and be reused by other researchers in the field.

### Interaction Storage ### {#interaction-storage}
For Interactions making use of notifications, the notifications MUST follow a speciified format to be processed, and for the relevant data to be extracted from the notiication. 

#### Automatic notification processing #### {#interaction-notification-processing}
Intercations could be added by using automatic notification processing.
This requires a service to be watching the pod inbox, and filter new notifications to exectute the required actions if the sender has the appropriate authentication.
This processing engine could then automatically update the resource metadata file with references to new comments, edit proposals, ...

#### Appendable-metadata-file #### {#appendable-metadata-file}
Provide a (separate ?,) appendable metadata file, that actors can append comment, ... metadata references to, provided they have the correct authentication.
In this case, some sort of protection SHOULD implemented, that prevents actors from appending data differing from a specified format. e.g. only triples of the form <publicationId> <ex:hasComment> <yourcommentId> can be added to the metadata file.


### Metadata Storage ### {#metadata-storage}
There are multiple solutions to store metadata for a non-rdf resource on a Linked Data Platform. However, applications built over linked data should not only implement one method, but should fall back to other solutions if the metadata file cannot be retrieved using one approach. This enables the applications to interact with resources that are stored using another approach to storing metadata.

#### .meta file #### {#meta-file}
A straightforward way to store file metadata on a Linked Data Platform is making use of a .meta file. As the .meta is a naming convention, for every file the .meta file can be automatically retrieved.
However, lately this seems to have been getting less and less traction in the comunity?

#### describedby / seeAlso metadata #### {#describedby}
Metadata can be provided in a more semantic way using predicates as ```rdf:seeAlso```.
This metadata can be stored in the location where the relevant resource is stored. 
A downside to this however is that if a resource is directly retrieved, this information will not be retrieved, and the metadata reference will be lost to the application retrieving the resource.

#### Link header #### {#link-seeAlso}
A third solution is to provide [Link Relations](https://www.w3.org/TR/ldp/#link-relation-describedby)
This solution returns the link to the metadata file in the response header of the HTTP request.
Using this solution in combination with the previous solution of providing the link to the metadata file in the RDF data where the resource is stored, provides the most complete approach to storing metadata for a resource.




### Data discovery ### {#data-discovery}
The Mellon framework requires an API for external services to be able to retrieve the publications of an actor, and its metadata, to index these publications and provide services over these publications. This implies that there should be a semantic way for external applications to discover the locations of publications and their metadata on a pod, and retrieve this data, if the application has the correct permissions.

#### Tree shapes #### {#tree-shapes}
OPTIONAL: Tree shapes can be used to indicate resource locations in a Solid pod environment.
External services MAY be able to interpret these shapes, and retrieve resources from the relevant locations.

#### Tree Collection #### {#tree-collection}
OPTIONAL: A Tree Collection can be specified for research papers, that MAY contain the shape of stored publications or RO-crates.
External services MAY be able to parse this data, and retrieve the relevant resources this way.

#### RDF Collection #### {#rdf-collection}
As a default fallback, an RDF Collection SHOULD be created in the user vCard, that contains references to all publications and their metadata.



### Ontologies ### {#ontology}
Thought should be given to what ontologies are used to represent semantic information in the Mellon framework. The use of different ontologies could mean that more or less compatibility layers are required for the framework to interact with different scholary communication frameworks outside of its network.


### Publication versioning ### {#rq-publication-versioning}
Versioning is a concept that is very relevant for scholarly communication, as publications can be iterated upon (incorporating reviews, ...).
In order to support this behavior, a versioning system must be in place that allows for actors in the network to retrieve different versions of the same research publication.


#### Publication interactions versioning #### {#rq-publication-interaction-versioning}
Interactions with a publication SHOULD link the relevant version of the publication.
This allows relevant interactions to be filtered for a specific version of the publication.
Certainly in the case of edits and reviews, as these interactions may not make sense in the context of a leter version of the publication.


### Subscription service ### {#subscription-service}

#### Activitypub service #### {#activitypub-service}


### Notifications ### {#notifications}
As the Mellon framework makes use of Linked Data Platforms data pods to store data of the different actions, a method is required for these different pods to interact with each other.
This functionality is achieved by making use of 

#### Notification-shape matching #### {#notification-shape-matching}

#### Automatic notification retrieval #### {#notification-retrieve}

#### Automatic notification processing #### {#notification-processing-agent}

### Activitypub ### {#activitypub}
[Activitypub](https://www.w3.org/TR/activitypub/) is a social networking protocol based upon the [ActivityStreams](https://www.w3.org/TR/activitystreams-core/) 2.0 data format.
It provides an API for creating, updating and deleting content, as well as a federated server to server API for delivering notifications and content



### Permissions ### {#req-permissions}
Actors in the network MUST be able to set and edit permissions for all actors in a network.
As the Mellon framework makes use of Linked Data Platforms, permissions are handled using ACL files.


#### READ permissions #### {#rq-publication-read-permissions}
For all files an actor has control permissions for, the actor MUST be able to edit the READ permissions for all other actors in the network.
This permission is required for other actors in the network to read the files in question.

#### WRITE permissions #### {#rq-publication-write-permissions}
For all files an actor has control permissions for, the actor MUST be able to edit the WRITE permissions for all other actors in the network.
This permission is required for other actors in the network to write to the files in question.

#### INTERACTION permissions #### {#rq-publication-interaction-permissions}
For all resources where interactions are possible, the actor MUST be able to edit the INTERACTION permissions for all other actors in the network.
INTERACTION permissions are permissions that enable certain interactions with a resource such as commenting on a resource, adding metadata, ...

TODO -> is this viable? can for example not stop someone from liking a resource and store the like in their own pod

#### CONTROL permissions #### {#rq-publication-control-permissions}
For all files an actor has control permissions for, the actor MUST be able to edit the CONTROL permissions for all other actors in the network.
This permission is required for other actors in the network edit permissions for the files in question.


#### Group permissions #### {#req-group-permissions}
Setting permissions for individual actors is often undesirable.
Support is required for setting and editing permissions for groups of actors.
Applications built on the Mellon framework SHOULD enable actors to to create, edit, and delete permissions for groups of actors.
Creating or updating a permission group MUST have the consequence that the permissions of this group are applied on the new permission group, and are removed from actors that are removed from the permission group.

#### Activitypub permissions #### {#activitypub-permissions}
The activitypub service requires permission checking functionality, according to the [specification](https://www.w3.org/TR/activitypub/).
These considerations should be taken into account when designing the permission systems for the Mellon framework.




### External services ### {#services}
The Mellon framework requires services to be abailable that can be used by actors in the network to achieve several goals, such as getting verification for publications, finding relevant publications for a subject on the network, querying over the network, getting peer reviews for a publication, ... 
All these services SHOULD not be specific for the Mellon framework alone, and could help connect different networks together, allowing researchers to query for publications and metadata over different networks of scholarly communication frameworks.

#### Data verification services #### {#verification-services}


#### Peer review services #### {#verification-services}

#### Indexing services #### {#verification-services}

#### Analytics services #### {#verification-services}

#### Activitypub services #### {#verification-services}



### Verification mechanics ### {#verification}
The Mellon framework requires a way for actors to verify information in the network by (one or more) trusted thrid parties.

#### Profile data verification #### {#profile-verification}
A method SHOULD be in place for actors to have their profile information verified by external entities.
This could mean for example past workplaces confirming that the actor has worked there (via an automatic API for example), or with confirmation of former colleagues.

#### Publication data verification #### {#publication-verification}
A publication MUST be verified by a trusted third party, in order to prove its legitimacy. This verification MUST be timestamped, in order for the actor publishing the research to prove that they were the first to publish this research.
The third party MAY verify this publication to publications already present in its network, and MAY provide the actor with proof that they are the first to publish that research in the known state of the art.

#### Peer review verification #### {#peer-review-verification}
A mechanism is required to allow publications to be peer reviewed by external parties.
External parties should be able to retrieve a specific version of the publication, on which a timestamped verification MUST be provided of the peer-review for that specific version of the publication.


Definitions {#definitions}
================================================================================

<!-- A <dfn>notification</dfn> is a distinct individual, group, organization, or piece of
software with an [=identity=] that can be strongly authenticated. -->

<pre class="biblio">
 {
<!--  "webid": {
    "href": "https://www.w3.org/2005/Incubator/webid/spec/identity/",
    "title": "WebID 1.0",
    "authors": [
      "Tim Berners-Lee",
      "Henry Story",
      "Andrei Sambra"
    ]
  },
  "did": {
    "href": "https://www.w3.org/TR/did-core/",
    "title": "Decentralized Identifiers (DIDs) v1.0",
    "authors": [
      "Drummond Reed",
      "Manu Sporney",
      "Dave Longley",
      "Christopher Allen",
      "Ryan Grant",
      "Markus Sabadello"
    ]
    }-->
  } 
</pre>