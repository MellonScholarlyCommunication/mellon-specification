<pre class='metadata'>
Title: Use Cases and Requirements for Linked Data Notifications in the Mellon Project
Shortname: ldnp-req
Level: 1
Max ToC Depth: 3
Status: w3c/ED
Group: UGent-Imec
URL: 
Editor: Ruben Dedecker (UGent - Imec)
Markup Shorthands: markdown yes
Abstract:
  Use Cases and Requirements for Linked Data Notifications in the Mellon Project.
</pre>

<!-- For bikeshed style overrides -->
<style>

  table.collections thead tr {
    font-size: 16px;
  }

  table.collections tbody tr:nth-child(even) {
    background-color: lightgray;
    font-size: 12px;
  }

  @media (prefers-color-scheme: dark) {
    table.collections tbody tr:nth-child(even) {
      background-color: DarkSlateGray;
    }
  }

  table.collections tbody td {
    font-size: 12px;
  }

  figcaption {
    text-align: left;
  }

  a[data-link-type=dfn] {
    color: #000000;
  }

  @media (prefers-color-scheme: dark) {
    a[data-link-type=dfn] {
      color: #FFFFFF;
    }
  }

}

</style>

<div boilerplate="copyright">
MIT License Copyright 2019 - 2020 UGent - Imec
</div>

Introduction {#intro}
================================================================================
The goal of the mellon project is to design a framework that enables scholarly communication over a decentralized network, where researchers can retain ownership and control over their published research.
In order to design this framework, different approaches to distrubuted networks have to be considered, and technical limitations have to be overcome.

In [[#scholary-communication]], the requirements and vision for scholarly communication are explained.
In [[#decentralization]], an architecture is proposed for scholarly communication over decentralized networks based on pod based data storage.
The artefacts required for scholarly communication are listed in [[$artefacts]].
For the proposed architecture, concrete use-cases are worked out in [[#usecases]].
From these use-cases, requirements are derived in [[#requirements]].


Scholarly communication {#scholary-communication}
================================================================================

## Core functions of scholarly communication ## {#functions-scholary-communication}
For scholarly communication to be successful, [four core functions](http://www.dlib.org/dlib/september04/vandesompel/09vandesompel.html) have to be fulfilled.
<table style="width:100%">
  <tr style="border-bottom: 1px solid #000;">
    <th style="width: 20%; padding-top: 10px; padding-bottom: 15px;">Function</th> 
    <th style="padding-top: 10px; padding-bottom: 15px;">Explanation</th>
  </tr>
  <tr>
    <th>Registration</th>
    <td>Allowing claims of precedence for a scholarly finding</td>
  </tr>
  <tr>
    <th>Certification</th> 
    <td>Establishing the validity of a registered scholarly claim</td>
  </tr>
  <tr> 
    <th>Awareness</th> 
    <td>Enabling actors in the scholarly system to remain aware of new claims and findings</td>
  </tr>
  <tr>
    <th>Archiving</th> 
    <td>Preserving the scholarly record over time</td>
  </tr>
</table>

These four functions are required in the network to be able to do scholarly communication.
In the context of a decentralized network, registration can also be viewed as a way to link researchers to their institutions, allowing for trust in the validity of the researcher and their research.

## Researcher-centric scholarly communication model
The goal is that researchers’ pods are hosted by their respective institutions, as part of the infrastructure provided in support of research and education. When a researcher moves on to another institution, the pod moves along and becomes hosted by the new institution. Researchers without institutional affiliation or with multiple affiliations can opt for commercial pod hosting platforms, national/regional academic hosting provisions that can be assumed to emerge, or host the pod themselves. Over time, a researcher’s pod accumulates an overview of scholarly contributions made throughout a career path. 

## The role of Instutions in a decentralized scholarly communication network ## {#institutions-decentralized-network-trust}
As decentralized networks do not have a single central service that actors can trust, actors in the network require an approach that allows them to trust other actors present in the network.

In these networks, institutions can take on the role as the orchestrators of a decentralized scholarly communication network.
These orchestrators connect the regisered researcher pods with the available service hubs in the network, and serve as a trusted mediator between the researchers and the service hubs.
Service hubs can trust all researcher pods registered to a trusted orchestrator (managed by an institution), as they trust that every researcher pod registered to that orchestrator is managed by a person affiliated with the managing institution of that orchestrator.
In the other direction, researchers registering their pods to the orchestrator managed by their institution trust the service hubs advertised by that orchestrator.
In the case of problems, the institution can change from / advertise multiple different service hubs, by changing the policies.

This way, institutions actively participate in the decentralized network of scholarly communication as orchestrators and trusted parties.


Architecture of a Decentralized Network for Scholarly Communication {#decentralization}
================================================================================

<figure>
	<img src="images/ecosystem.png" />
	<figcaption>A decentralized, decoupled scholarly communication ecosystem with researcher pod, scholarly dashboard, orchestrator, Service Hubs, scholarly browser.</figcaption>
</figure>



## Researcher pod ## {#researcher-pod}
The researcher pod serves as the main hub for a researcher, serving as a storage module for scholarly artefacts and interactions, and for exchanging information with external service providers and institutions.


A researcher pod stores the following information:

<table style="width:100%">
  <tr style="border-bottom: 1px solid #000;">
    <th style="width: 20%; padding-top: 10px; padding-bottom: 15px;">Information type</th> 
    <th style="padding-top: 10px; padding-bottom: 15px;">Explanation</th>
  </tr>
  <tr>
    <th>Personal contributions</th>
    <td>Scholarly contributions (artifacts and interaction artifacts) made by the researcher and descriptive metadata for them. This information is recorded using the researcher’s preferred authoring applications</td>
  </tr>
  <tr>
    <th>Functions of scholarly communication</th> 
    <td>Lifecycle event metadata pertaining to the fulfilment of the functions of scholarly communication for the researcher’s personal contributions. Through the intermediation of the Orchestrator, this information is obtained via Service Hubs of platforms that fulfil the respective functions</td>
  </tr>
  <tr>
    <th>Peer contributions</th> 
    <td>Pertinent metadata about selected interaction artifacts created by peers and pertaining to the researcher’s personal contributions. This information is obtained via an Awareness Service Hub (the one used for the interaction artifact) through the intermediation of the peers’ Orchestrator</td>
  </tr>
  <tr>
    <th>Social interactions</th> 
    <td>A record of the informal interactions the researcher has with peers via available social network features that are enabled by solid pods</td>
  </tr>
</table>

## Orchestrator (managed by Institutions) ## {#orchestrator}
Institutions participate in the decentralized scholarly communication network by providing one or more orchestrators that the researchers affiliated with the institutions can register to.
This way, an institution manages their affiliated researchers, and has a responsability for the registered pods. 
The orchestrators connect researcher pods with a relevant set of service hubs that enable the researcher pod to fulfill all the [functions of scholarly communication](#functions-scholary-communication) 
In its role as an orchestrator, it can set policies that are enforced in the communication between the research pods and the service hubs.

Orchestrators should be linked to institutions to allow for [trust based operating of the network](#institutions-decentralized-network-trust).

## Service hubs ## {#service-hub}
Service hubs provide services to the network.
These services are necessary to enable the execution of the [functions of scholarly communication](#functions-scholary-communication) by the network.
Service hubs are a way to decentralize the functionality that is currently primarily contained to centralized services.
Orchestrators have a choice between all the available service hubs in the network to, and can require one (or multiple) of the available service hubs to be used by the affiliated researcher pods to fulfill a function of scholarly communication.

## Collector ## {#collector}
A Collector is a service that collects and indexes information on the artefacts in the network.
It collects this information from the available service hubs in the network. (It might make sense to also allow collectors to retrieve information directly from researcher pods. Else the interaction artefacts have to pass through a service hub that can be retrieved by a collector in the network. Also it can bypass service hubs if they are not willing to provide all required information themselves / only partly).
It stores information about the available artefacts, and the linked lyfecycle events and interaction artefacts.
The collector provides an outward API that enables querying of the artefact information in the network. It can also provide indexing information to enable clients to filter over the exposed data. (This might be an interesting use case for event streams!).
In the case of multiple distributed networks, collectors can collect data from / refer to other collectors in other networks to enable evaluating queries over all linked networks.

## Scholarly Dashboard ## {#scholarly-dashboard}
The scholarly dashboard is the interface that can be used by researchers to execute the lifecycle events of an artefact (publish an artefact, review an artefact, interact with an artefact, ...)
(This dashboard may also include functionality for direct interactions between researchers, however this is out of scope for a basis scholarly dashboard).
A scholarly dashboard can be managed by an institution, requiring the users to have a data pod registered with the institution in order to use the dashboard to create and interact with artefacts in the network.

## Scholarly Browser ## {#scholarly-browser}
The scholarly browser is the interface that can be used by anyone to query the distributed network for information on scholarly artefacts.
It provides information about the artefact, as well as lifecycle events and the available interactions with the artefact.


Artefacts of scholarly communication {#artefacts}
================================================================================
The functions of scholarly communication produce artefacts.
These artefacts need to be stored on the relevant locations, and should be retrievable by the appropriate actors to fulfil the functions of scholarly communication.


## Artefacts ## {#artefacts}
The artefacts of scholarly communication that are to be stored in the decentralized network.
In this section, the artefacts stored and generated by the network are listed and explained.

### Research Artefacts ### {#research-artefacts}
These artefacts are the result of research done by a researcher.

(This list is non-exhaustive)

<table style="width:100%">
  <caption>Research artefacts</caption>
  <tr>
    <th style="width: 20%; padding-top: 10px; padding-bottom: 15px;"></th> 
    <th style="padding-top: 10px; padding-bottom: 15px;"></th>
  </tr>
  <tr>
    <td>Paper (preprint)</td> 
    <td>A research paper (preprint) and the corresponding metadata.</td> 
  </tr>
  <tr>
    <td>Supporting data</td> 
    <td>Images, datasets, software, ..., supporting the research and their respective metadata</td> 
  </tr>
  <tr>
    <td>RO's</td> 
    <td>Research objects ([Research Object Crates](http://www.researchobject.org/ro-crate/)) is an approach to packaging research data and metadata. 
    This may be useful to create a unified semantic layer over published components of research.</td> 
  </tr>
</table>



### Interaction Artefacts ### {#interaction-artefacts}
These artefacts are the result of interactions on artefacts by actors in the network.

(This list is non-exhaustive)

<table style="width:100%">
  <caption>Interaction artefacts</caption>
  <tr>
    <th style="width: 20%; padding-top: 10px; padding-bottom: 15px;"></th> 
    <th style="padding-top: 10px; padding-bottom: 15px;"></th>
  </tr>
  <tr>
    <td>Comment</td> 
    <td>A comment made on an artefact in the network and its metadata (creator, timestamp, ...)</td> 
  </tr>
  <tr>
    <td>Proposed edit</td> 
    <td>A proposed edit on an artefact in the network and its metadata</td> 
  </tr>
  <tr>
    <td>Review</td> 
    <td>A review by an actor in the network of a research artefact in the network.</td> 
  </tr>
</table>

### Artefact Lifecycle Events ### {#lifecycle-events}
Artefact lifecycle events provide metadata over the events that happen in the lifecycle of an artefact.
This metadata enables actors in the network to follow the events in the artefact lifecycle step by step, and to retrieve all information relevant to the artefact.

<table>
  <caption>Artefact lifecycle events</caption>
    <td>Creation</td> 
    <td>The creation of a research project (with initial data?) by an actor in the network.</td> 
  </tr>
  <tr>
    <td>Publication</td> 
    <td>The publication of research (in the form of a paper publication / research object / ...) by an actor (individual researcher / institution / ...) in the network</td> 
  </tr>
  <tr>
    <td>Review</td> 
    <td>An artefact in the network has been reviewed by an actor in the network</td> 
  </tr>
  <tr>
    <td>Update</td> 
    <td>An artefact in the network has been updated by an actor in the network</td> 
  </tr>
  <tr>
    <td>Reference</td> 
    <td>An artefact in the network has been referenced by another artefact in the network</td> 
  </tr>
  <tr>
    <td>Subscription</td> 
    <td>An actor in the network has subscribed to an artefact in the network</td> 
  </tr>
  <tr>
    <td>Interactions</td> 
    <td>An actor in the network has interacted with an artefact in the network.</td> 
  </tr>
</table>




<figure>
	<img src="images/artefactmetadata.png" />
	<figcaption>artifacts, interaction artifacts, descriptive metadata, event metadata</figcaption>
</figure>


## Subscribing to artefacts in the network ## {#subscribable-entities}
Actors inside (and outside) the network may be interested in following specific research topics, authors, ... .
This is a core function of scholarly communication: [Awareness](#functions-scholary-communication).
For scholarly communication, it should be possible to subscribe on all lifecycle events of artefacts in the network (for which an actor has the correct permissions).
This can be handled by the available [Service Hubs for awareness](#service-hub) present in the network. [Collectors](#collector) present in the network can also pose as an awareness service hub, as it indexes lifecycle information of all artefacts present in the network
These [Service Hubs for awareness](#service-hub) should be equipped to enable actors in the network to subscribe to specific lifecycle information for research artefacts that match given filter criteria.
E.g. an actor should be able to subscribe to creation lifecycle events of artefacts tagged with "Scholarly Communication".
The service hub should be able to advertise the available options for filtering research, and the lifecycle information which can be subscribed to.

Use Cases {#usecases}
================================================================================

## Joining a network
In order to create or interact with artefacts in a scholarly communication network, a user must have a valid data pod environment to store these (interaction) artefacts.
In order for these artefacts to be taken into the scholarly record, they have to be passed to the respective service hubs that fulfil these functions.
For this to be possible, the data pod must be registered with an orchestrator, that will ensure that the created artefacts can follow the correct steps to be included in the scholarly record.


### Creating a data pod ### {#uc-create-pod}
Bob wants to interact with published artefacts in the network, but does not have a data pod available to store these interactions.
The [scholarly dashboard](#scholarly-dashboard) used to interact with artefacts in the network provides an option to login to an existing pod, register an existing data pod or to create a new data pod.
Bob chooses the option to create a new pod, and is redirected to an environment where he can create a new data Pod (The available environments can depend on the institution managing the scholarly dashboard, and may require the registered data pods to be hosted one or more specific platforms).


### Registring a data pod to the network ### {#uc-register-pod}
Bob wants to interact with published artefacts in the network, and has a data pod available.
Bob chooses the option of the [scholarly dashboard](#scholarly-dashboard) to register an existing data pod.
The institution managing the scholarly dashboard checks the validity of the data pod and the pod owner, and may choose to register the applicant in their system.
With the pod being registered to the network, it receives a reference to the orchestrator service(s) present in the network (and tied to that institution).

### Logging in to a scholarly dashboard ### {#uc-login-dashboard}
TODO



### Logging in to existing researcher pod ### {#login-pod}
Bob already has an existing pod environment, and wants to login on the Mellon project web view.
On opening the view, he is given the option to login to an existing pod, or to create a new pod.
Bob chooses the option to login to an existing pod, and is redirected to an environment to login to a new Solid Pod.
On login, Bob is redirected to the landing page.




## Managing a researcher profile ## {#uc-profile}
A framework designed for scholarly communication requires researchers to be able to setup and edit a personal profile.
A profile is required for actors in the network to discover and index the researchers present in a network.
A profile SHOULD be created on joining a network, as the profile information is required to verify the identity of the researcher managing the data pod (services can decide to not trust pods of which the validitiy / researcher cannot be verified).


### View researcher profile ### {#view-profile}
Bob encounteres an interesting research paper made by Alice.
Bob clicks on Alice's name, and is redirected to a profile viewer.
This profile viewer shows all relevant information available for Alice.
It also gives the option to subscribe to all future research of Alice, or to block Alice from subscribing to your research. [[#subscribe-to-actor]].


#### Edit researcher profile #### {#edit-profile}
While viewing his own profile, Bob decides to edit the profile information.
Bob clicks on the edit button to go to a profile editor view.
Bob fills in additional information about work location and previous work locations.
Bob saves the edits, and they are saved to his profile.
Bob is redirected to the profile view, where the information has been updated, and is displayed correctly according to the changes made.

This action can be performed for all profile cards where Bob has the correct edit permissions (which is usually only his own profile card).

### Institution Profile ### {#institution-profile}

#### View institution profile #### {#view-institution-profile}
TODO::

#### Edit institution profile #### {#edit-institution-profile}
TODO::

## Subscribing to entities in the network ## {#subscribe}
Scholarly communication requires actors in the network to be able to follow the developments of existing research and to be notified of new research.
As an actor is likely to not be interested in all research fields, the actor should be able to specify the relevant research for which the actor wishes to receive updates.

There are multiple dimensions on which an actor should be able to subscribe to relevant research.
To enable actors to subscribe to new research for a given dimension, functionality needs to be in place to automatically notify all actors subscribed to a certain dimensions. 
e.g. subscribe to research with a certain title / from a certain author / that contains certain tags.



<table style="width:100%">

  <tr>
    <th style="padding-top: 15px; padding-bottom: 15px;">Dimension of research on which can be filtered</th> 
    <th style="padding-top: 15px; padding-bottom: 15px;">Actors that can index the relevant information</th>
    <th style="padding-top: 15px; padding-bottom: 15px;">Events for which subscribers are notified</th>
  </tr>
  <tr>
    <td>id (one specific research)</td> 
    <td>research view / author profile / orginisation / 3d party indexing services</td> 
    <td>All lifecycle events for the specific research</td>
  </tr>
  <tr>
    <td>author</td> 
    <td>author profile / orginisation / 3d party indexing services</td> 
    <td>Creation of new research, updates of existing research</td>
  </tr>
  <tr>
    <td>tags, title, date, ...</td> 
    <td>author profile (only for research by this author) / orginisation (only for research by this orginisation) / 3d party indexing services (only for research indexed by this 3d party service)</td> 
    <td>Creation of new research, updates of existing research</td>
  </tr>
</table>

To enable subscriptions to certain research dimensions, the actor responsible for handing these subscriptions needs to have infrastructure in place to keep track of the current subscribers for a given dimension, and notify these subscribers of new events.
An actor is also required to indicate the dimensions for which they can support subscriptions (e.g. does the actor allow to subscribe on the tags / title / ... of available research).

### View actors subscribed to entity 
For all subscribable entities in the network, an actor should be able to view the actors subscribed to the entity, given the correct permissions.

#### View actors subscribed to actor
Bob wants to view the actors in the network that are subscribed to him.
For this, Bob goes to his profile viewer, and goes to the followers view.
This provides Bob with a list of all actors in the network following him.

#### View actors subscribed to publication
Bob wishes to view actors subscribed to his last publication.
Bob navigates to the publication view of his last publication, 
and clicks on the following tab.
Now Bob has a list of all actors to his last publication.


### View entities an actor is subscribed to
Bob wishes to see all actors he is subscribed to.
For this, Bob navigates to his subscription view, where a list of all actors that Bob is subsribed to is available.
Separate tabs are made available for the different kinds of subscribable entities in the network.

### Subscribe to a new entity
Bob wishes to subscribe to a new entity in the network.

#### Subscribe to a new actor #### {#subscribe-to-actor}
Bob wishes to receive updates of events of his colleague Alice.
For this, Bob heads to the profile of Alice, and clicks the follow option.
This adds Alice to the following list of Bob, and adds Bob to the followers list of Alice.
For all future events of Alice, Bob now receives a notification for the event.

#### Subscribe to a new publication
Bob wishes to receive updates of events of a certain publication that he is interested in.
Bob heads to the publication view, and clicks the follow option.
For all future events in the publication lifecycle, Bob now receives a notification.

### Unsubscribe from an entitiy 
Bob does not wish to receive updates from a certain actor anymore that he is following.
Bob navigates to the following view, showing the entities that Bob is following in the network.
Bob searches for the entity in the list that he wants to unsibscribe from.
Bob clicks ubsubscribe, after which Bob is unsubscribed from the entity and the entitiy is removed from the list.

### Block actors subscribed to entity 
Bob wishes to remove an actor from his followers list (or from the followers list of one of his pubications).
For this, Bob navigates to the followers view of the resource in question.
Here, bob searches for the actor that he wants to block from a resource.
Bob adds this actor to the blocked list for the resource in question.


## Publications ## {#publications}

### Add new publication ### {#add-publications}
Bob decides to publish a new research paper.
As the research was never uploaded before, Bob now uploads the resource as a publication.
On upload, the research is sent to a service hub for verification [[#service-hub-certification]].
As the resource is published, READ permissions for the research are set to public.
Bob decides to give public permissions to interact with the resource [[#permissions]].


### Publication versioning ### {#publication-versioning}
It may be of use to incorporate a versioning system for (published?) research.
This allows the most up to date versions of research to be available for all parties, as well as for interactions such as comments on different versions of the publication to still make sense when the research has been update.

#### View publication versions #### {#view-versions}
Bob wishes to see the available version for a publication.
In the publication view, an option is availble to select the different versions of the publication.
Bob selects the desired version, and the publication view is updated to show the data of the selected publication version.

#### Link publication resources with a publication version #### {#link-versions}
Bob is going through the reviews of a publication.
Bob notices a review was done on an older version of the publication. By following the reference to the outdated version of the publication, Bob is redirected to the publication view for the older version of the publication.


### In-progress research ### {#in-progress-research}

#### Uploading in-progress research #### {#upload-in-progress-research}
Bob uploads in-progress research to his solid pod.
As the research is still in progress, Bob flags the research project as in-progress.
On upload, Bob decides his research group can have read access to the resources, as well as the possibility to comment on the resource or propose edits. He [sets these permissions](#permissions) in the upload screen [[#permissions]].

#### Publish in-progress research #### {#publish-in-progress-research}
After completing the research, and finishing the paper, Bob decides to publish the research.
As the research was already uploaded as in-progress, Bob now has the option to publish the research. This flags the research as published, and sends the research to a 3d party to be verified [[#service-hub-certification]].



### Publication permissions ### {#publications-permissions-stump}
For use cases involving permissions, see [[#publication-permissions]]


## Interactions ## {#interactions}
Scholarly communication requires the ability for different actors in the network to interact with each other and with the done research and publications.



### Comment ### {#interaction-comment}

### Propose edit ### {#interaction-propose-edit}
Bob is evaluating the research of his colleague Alice, that is still in-progress.
In this process, he finds some things that should be adapted, and proposes some edits on the research paper. These edits are sent to Alice's pod using the notification mechanism, and are added as metadata to the in-progress research.
A second colleague with full access to the in progress research sees the proposed edits, and decides to edit the paper to incorporate the proposed edits.

This action depends on the type of publication, or can be outsourced to external tooling.




## Permissions ## {#permissions}
TODO::

### Actor follower permissions ### {#actor-permissions}

#### READ permissions #### {#follower-read-permissions}

#### WRITE permissions #### {#follower-write-permissions}

#### INTERACTION permissions #### {#follower-interaction-permissions}

#### CONTROL permissions #### {#follower-control-permissions}


### Publication follower permissions ### {#publication-permissions}

#### READ permissions #### {#publication-read-permissions}

#### WRITE permissions #### {#publication-write-permissions}

#### INTERACTION permissions #### {#publication-interaction-permissions}

#### CONTROL permissions #### {#publication-control-permissions}

### Group permissions ### {#group-permissions}

#### Create group permissions #### {#create-group-permissions}

#### Edit group permissions #### {#edit-group-permissions}




## News feed ## {#feed}
TODO::

### Personalized news feed ### {#news-feed}

### Post feed of other actors ### {#post-feed}



## Third party services ## {#service-hub}


### Subscribe pod to service ### {#service-hub-subscribe}
Bob wishes to make use of the Ugent service that indexes and archives all research of the UGent.
Bob registres his pod to the UGent service via the UGent service endpoint.
Bob grants the UGent service READ access to the publications of his pod.
The UGent service can now index Bob's publications, and provide services such as related publications, statistics, ... 
The UGent service can also act as an [activitypub](https://www.w3.org/TR/activitypub/) service.

### Certify publications ### {#service-hub-certification}
On publication of a resource, Bob wants to cerify this publication with a service hub.
For this, Bob sends the publication to a verification service hub .
This service MUST return a timestamped proof that the publication has been proposed for certification.
On verification that the publication is genuine, the service sends a notification to the pod inbox with a ceritification that the research has been verified by the service hub .






Requirements {#requirements}
================================================================================
In this section the requirements are listed based on the use cases proposed in [[#usecases]].

## Solid Data Storage ## {#solid-storage}
TODO:
The Mellon framework aims to provide researches with the ability to publish their own research, and keep control of the data in the process.
For this, pod environments such as Solid, that can be hosted by research groups themselves or on third party services, can be used.

### Publication storage ### {#publication-storage}
Publications can be stored as documents on the data pod of the researcher, or can be linked to the data pod from an external sources using mechanics described in [[#req-data-discovery]].


#### Publication format #### {#publication-format}
The format of a publication has consequences on the interactions that are possible with the publication.
Interactions possible with html files, will not be possible for research stored in a PDF or LATEX format.
Because of this, EITHER research MUST be published in a set format, or services SHOULD advertise the formats they accept [[#services]].

#### In-progress research storage #### {#publication-storage}
Supporting in-progress research may provide an easy platform for research groups to evaluate research internally before publishing the research and making it public.
In-progress research does not require additional functionality from the framework, but requires a different template to be available on upload, where permissions are automatically set on private for all resources, except for actors or groups of actors that are selected by the uploades (such as the research group of the uploader).

#### Research Object Crate storage #### {#publication-storage}
Research Object Crates or [RO-crates](https://www.researchobject.org/ro-crate/) are a format to store research projects, that allow different aspects of the research (paper, code, dataset, configuration files, ... ) to be bundeled.
The Mellon framework would certainly benefit in requiring applications built on the Mellon Framework to be able to process RO-creates.
This also allows datasets used for publications to be made public (given that permissions are set to public), and be reused by other researchers in the field.

### Interaction Storage ### {#interaction-storage}
For Interactions making use of notifications, the notifications MUST follow a speciified format to be processed, and for the relevant data to be extracted from the notiication. 

#### Automatic notification processing #### {#interaction-notification-processing}
Intercations could be added by using automatic notification processing.
This requirement is handled in [[#rq-notification-processing-agent]].

#### Appendable-metadata-file #### {#appendable-metadata-file}
Provide a (separate ?,) appendable metadata file, that actors can append comment, ... metadata references to, provided they have the correct authentication.
In this case, some sort of protection SHOULD implemented, that prevents actors from appending data differing from a specified format. e.g. only triples of the form <publicationId> <ex:hasComment> <yourcommentId> can be added to the metadata file.


### Metadata Storage ### {#metadata-storage}
There are multiple solutions to store metadata for a non-rdf resource on a Linked Data Platform. However, applications built over linked data should not only implement one method, but should fall back to other solutions if the metadata file cannot be retrieved using one approach. This enables the applications to interact with resources that are stored using another approach to storing metadata.

#### .meta file #### {#meta-file}
A straightforward way to store file metadata on a Linked Data Platform is making use of a .meta file. As the .meta is a naming convention, for every file the .meta file can be automatically retrieved.
However, lately this seems to have been getting less and less traction in the comunity?

#### describedby / seeAlso metadata #### {#describedby}
Metadata can be provided in a more semantic way using predicates as ```rdf:seeAlso```.
This metadata can be stored in the location where the relevant resource is stored. 
A downside to this however is that if a resource is directly retrieved, this information will not be retrieved, and the metadata reference will be lost to the application retrieving the resource.

#### Link header #### {#link-seeAlso}
A third solution is to provide [Link Relations](https://www.w3.org/TR/ldp/#link-relation-describedby)
This solution returns the link to the metadata file in the response header of the HTTP request.
Using this solution in combination with the previous solution of providing the link to the metadata file in the RDF data where the resource is stored, provides the most complete approach to storing metadata for a resource.




### Data discovery ### {#req-data-discovery}
Data discovery is required for external services to retrieve artefacts from a researcher pod, on being notified of new data.
There should be a semantic way for external applications and services to discover the locations of certain types of artefacts and their metadata, and retrieve this data, given the correct permissions.

### Posting data to a pod ### {#req-pod-posting-data}
External services that need to post data to the researcher pod (e.g. registration service hub returning a certificate of registration) need to be aware of the location where they can post this data.
This could be handles with solutions like shape trees, where the pod indicates a location for data being added matching a predetermined format, or this can be done by notifying the pod of data needing to be added, and putting the responsability of retrieving and storing the data at the data pod.
Data discovery is required for external services to retrieve artefacts from a researcher pod, on being notified of new data.
There should be a semantic way for external applications and services to discover the locations of certain types of artefacts and their metadata, and retrieve this data, given the correct permissions.

### Ontologies ### {#ontology}
Thought should be given to what ontologies are used to represent semantic information in the Mellon framework. The use of different ontologies could mean that more or less compatibility layers are required for the framework to interact with different scholary communication frameworks outside of its network.


### Publication versioning ### {#rq-publication-versioning}
Versioning is a concept that is very relevant for scholarly communication, as publications can be iterated upon (incorporating reviews, ...).
In order to support this behavior, a versioning system must be in place that allows for actors in the network to retrieve different versions of the same research publication.


#### Publication interactions versioning #### {#rq-publication-interaction-versioning}
Interactions with a publication SHOULD link the relevant version of the publication.
This allows relevant interactions to be filtered for a specific version of the publication.
Certainly in the case of edits and reviews, as these interactions may not make sense in the context of a leter version of the publication.


### Subscribing ### {#subscription-service}
The mellon framework requires the possibility for actors in the network to subscribe to the entities in the network.
Several protocols already exist for subscribing to resources on Linked Data Platforms.

#### Activitypub #### {#activitypub}
[Activitypub](https://www.w3.org/TR/activitypub/) is a social networking protocol based upon the [ActivityStreams](https://www.w3.org/TR/activitystreams-core/) 2.0 data format.
The Activitypub protocol specifies an API that allows actors in the network to create a ```Follow``` activity, that subscribes the sender to the activities of another actor.
This way, the subscribed actor will now be notified of activities such as the creation of new publications, public posts, ... of the actor that they subscribed to.
If publications are handles as actors in the network, they can also be subscribed to, enabling actors that subscribe to a publication to see new activities such as edits or added comments to the publication.
In this case however publications SHOULD provide a unique outbox for the activitypub protocol. If this is not the case all posts in the pod outbox for all publications have to be traversed to find relevant information for a single publication.



### Notifications ### {#notifications}
Notifications are at the center of passing messages between actors in a network of Linked Data Platforms.
The Activitypub procotol specified above [[#activitypub]] requires notifications to notify followers of change in the entities they are subscribed to.
However, as notifications are prevalent in these networks, they require efficient tooling to retrieve and process.

#### Notification shape matching #### {#notification-shape-matching}
Notification shape matching tooling is required to retrieve notifications in a an inbox, that conform to a specified shape.
Shape matching makes use of a shape ontology, for which both [shacl](https://www.w3.org/TR/shacl/) and [shex](https://shex.io/) are currently the most relevant shape ontologies.
Notification shape matching tools MUST return ALL notifications in an inbox that conform to a given shape.

#### Automatic inbox updating #### {#notification-retrieve}
Tools are required that automatically retrieve new notifications for a specified inbox when new notifications arrive in this inbox.
This is necessary for applications that need to provide actors with real time updates of new notifications.
These tools MAY incorporate shape matching tools [[#notification-shape-matching]].

#### Automatic notification processing #### {#rq-notification-processing-agent}
Applications built on the Mellon Framework may require automatic actions to be executed on receiving notifications matching a given shape.
For matching the notification shape, shape matching tools [[#notification-shape-matching]] are required.
Automatic processing of notifications requires an active agent to be watching the pod inbox, and filter the new notifications to exectute the required actions if the sender has the appropriate permissions to execute the required action.
An automatic processing agent can be used to update resource metadata, in contrast to allowing external actors to directly update resource metadata.
This gives much more control over what can be added, as the notification processing agent can be tuned to refuse all attempted updates if they do not conform to a given shape.


### Permissions ### {#req-permissions}
Actors in the network MUST be able to set and edit permissions for all actors in a network.
As the Mellon framework makes use of Linked Data Platforms, permissions are handled using ACL files.


#### READ permissions #### {#rq-publication-read-permissions}
For all files an actor has control permissions for, the actor MUST be able to edit the READ permissions for all other actors in the network.
This permission is required for other actors in the network to read the files in question.

#### WRITE permissions #### {#rq-publication-write-permissions}
For all files an actor has control permissions for, the actor MUST be able to edit the WRITE permissions for all other actors in the network.
This permission is required for other actors in the network to write to the files in question.

#### INTERACTION permissions #### {#rq-publication-interaction-permissions}
For all resources where interactions are possible, the actor MUST be able to edit the INTERACTION permissions for all other actors in the network.
INTERACTION permissions are permissions that enable certain interactions with a resource such as commenting on a resource, adding metadata, ...

TODO -> is this viable? can for example not stop someone from liking a resource and store the like in their own pod

#### CONTROL permissions #### {#rq-publication-control-permissions}
For all files an actor has control permissions for, the actor MUST be able to edit the CONTROL permissions for all other actors in the network.
This permission is required for other actors in the network edit permissions for the files in question.


#### Group permissions #### {#req-group-permissions}
Setting permissions for individual actors is often undesirable.
Support is required for setting and editing permissions for groups of actors.
Applications built on the Mellon framework SHOULD enable actors to to create, edit, and delete permissions for groups of actors.
Creating or updating a permission group MUST have the consequence that the permissions of this group are applied on the new permission group, and are removed from actors that are removed from the permission group.

#### Activitypub permissions #### {#activitypub-permissions}
The activitypub service requires permission checking functionality, according to the [specification](https://www.w3.org/TR/activitypub/).
These considerations should be taken into account when designing the permission systems for the Mellon framework.




### External services ### {#services}
The Mellon framework requires services to be abailable that can be used by actors in the network to achieve several goals, such as getting verification for publications, finding relevant publications for a subject on the network, querying over the network, getting peer reviews for a publication, ... 
All these services SHOULD not be specific for the Mellon framework alone, and could help connect different networks together, allowing researchers to query for publications and metadata over different networks of scholarly communication frameworks.

#### Data verification services #### {#verification-services}


#### Peer review services #### {#verification-services}

#### Indexing services #### {#verification-services}

#### Analytics services #### {#verification-services}

#### Activitypub services #### {#verification-services}



### Verification mechanics ### {#verification}
The Mellon framework requires a way for actors to verify information in the network by (one or more) service hubs.

#### Profile data verification #### {#profile-verification}
A method SHOULD be in place for actors to have their profile information verified by external entities.
This could mean for example past workplaces confirming that the actor has worked there (via an automatic API for example), or with confirmation of former colleagues.

#### Publication data verification #### {#publication-verification}
A publication MUST be verified by a service hub , in order to prove its legitimacy. This verification MUST be timestamped, in order for the actor publishing the research to prove that they were the first to publish this research.
The service hub MAY verify this publication to publications already present in its network, and MAY provide the actor with proof that they are the first to publish that research in the known state of the art.

#### Peer review verification #### {#peer-review-verification}
A mechanism is required to allow publications to be peer reviewed by external parties.
External parties should be able to retrieve a specific version of the publication, on which a timestamped verification MUST be provided of the peer-review for that specific version of the publication.


Definitions {#definitions}
================================================================================

<!-- A <dfn>notification</dfn> is a distinct individual, group, organization, or piece of
software with an [=identity=] that can be strongly authenticated. -->

<pre class="biblio">
 {
<!--  "webid": {
    "href": "https://www.w3.org/2005/Incubator/webid/spec/identity/",
    "title": "WebID 1.0",
    "authors": [
      "Tim Berners-Lee",
      "Henry Story",
      "Andrei Sambra"
    ]
  },
  "did": {
    "href": "https://www.w3.org/TR/did-core/",
    "title": "Decentralized Identifiers (DIDs) v1.0",
    "authors": [
      "Drummond Reed",
      "Manu Sporney",
      "Dave Longley",
      "Christopher Allen",
      "Ryan Grant",
      "Markus Sabadello"
    ]
    }-->
  } 
</pre>